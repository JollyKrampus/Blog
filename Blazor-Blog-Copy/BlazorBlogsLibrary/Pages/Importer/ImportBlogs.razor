@page "/importblogs"
@inject IConfiguration _configuration
@inject GeneralSettingsService _GeneralSettingsService
@inject BlogsService _BlogsService
@inject IWebHostEnvironment _IWebHostEnvironment
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using BlazorBlogsLibrary.Data
@using BlazorBlogsLibrary.Data.Models
@using Microsoft.AspNetCore.Hosting
@using BlazorBlogsLibrary.Classes
@using DotNetNukeBlogs.Data.Models
@using System.Security.Claims
@using System.Text
@using System.Text.RegularExpressions
@using System.Web
@using DotNetNukeBlogs.Data
@using BlazorBlogs.Data.Models
@using System.IO
@inherits OwningComponentBase
<AuthorizeView>
    <Authorized>
        <h1>Import Blogs</h1>
        <p>Works with: <a href="https://github.com/DNNCommunity/DNN.Blog">DotNetNuke Blog</a></p>
        <br/>
        @if (context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <!-- Connection Selection -->
            <h4>Source</h4>
            <RadzenDropDown AllowClear="false"
                            AllowFiltering="false"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="SelectedConnection" Multiple="false"
                            Placeholder="Select Connection..."
                            Data="@ColExternalConnections" TextProperty="ConnectionName"
                            Style="width: 500px;"
                            Change="@(args => ChangeConnection(args, "DropDown"))"/>
            <br/>
            @if (SelectedConnection != null)
            {
                <button class="btn btn-primary"
                        @onclick="() => EditConnection()">
                    Edit
                </button>
            }
            <span>&nbsp;</span>
            <button class="btn btn-success"
                    @onclick="() => NewConnection()">
                New Connection
            </button>
            <br/>
            <br/>
            <!-- Blog Selection -->
            @if (SelectedConnection != null)
            {
                <h4>Blog</h4>
                @if (ShowProgressBar)
                {
                    <div style="max-width: 500px;">
                        <RadzenProgressBar Value="100" ShowValue="false"
                                           Mode="ProgressBarMode.Indeterminate"
                                           Style="width: 500px;"/>
                    </div>
                }
                else
                {
                    <RadzenDropDown AllowClear="false"
                                    AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="SelectedBlogEntry" Multiple="false"
                                    Placeholder="Select Blog..."
                                    Data="@ColBlogEntries" TextProperty="Title"
                                    Style="width: 500px;"/>
                    <br/>
                    @if (SelectedBlogEntry != null)
                    {
                        <button class="btn btn-primary"
                                @onclick="() => EditBlog()">
                            Edit Blog
                        </button>
                    }
                }
            }

            <!-- ImportBlogsEdit Popup -->
            <ImportBlogsEdit @ref="ImportBlogsEditControl"/>

            <!-- Connection Popup -->
            <ImportBlogsDatabaseConfiguration @ref="@objImportBlogsDatabaseConfiguration"
                                              paramConnectionSetting="@objConnectionSetting"
                                              DatabaseConfigurationChanged="@DatabaseConfigurationComplete"/>
        }
    </Authorized>
    <NotAuthorized>
        <h3>Administration</h3>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ImportBlogsEdit ImportBlogsEditControl;

    ImportBlogsDatabaseConfiguration objImportBlogsDatabaseConfiguration;
    readonly DTOConnectionSetting objConnectionSetting = new();

    readonly string ADMINISTRATION_ROLE = "Administrators";

    List<ExternalConnectionsDTO> ColExternalConnections = new();
    ExternalConnectionsDTO SelectedConnection;

    List<BlogEntries> ColBlogEntries = new();
    BlogEntries SelectedBlogEntry;

    ClaimsPrincipal CurrentUser = new();
    private bool ShowProgressBar;

    protected override async Task OnInitializedAsync()
    {
    // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        _GeneralSettingsService = (GeneralSettingsService) ScopedServices.GetService(typeof(GeneralSettingsService));
        _BlogsService = (BlogsService) ScopedServices.GetService(typeof(BlogsService));

        await RefreshConnectionsAsync(null);
    }

    // Database Connection

    private async Task RefreshConnectionsAsync(int? SelectedConnectionId)
    {
        ColExternalConnections = await _BlogsService.GetExternalConnectionsAsync();

        if (SelectedConnectionId != null)
        {
            if (ColExternalConnections.Count > 0)
            {
                SelectedConnection = ColExternalConnections.FirstOrDefault();
                StateHasChanged();
            }
        }
        else
        {
            SelectedConnection = ColExternalConnections.Where(x => x.Id == SelectedConnectionId).FirstOrDefault();
        }
    }

    public async Task DatabaseConfigurationComplete(DTOConnectionSetting paramConnectionSetting)
    {
        if (paramConnectionSetting.ConnectionState == ConnectionState.Add)
        {
            SelectedConnection = new ExternalConnectionsDTO();

            SelectedConnection.DatabaseName = paramConnectionSetting.DatabaseName;
            SelectedConnection.ServerName = paramConnectionSetting.ServerName;
            SelectedConnection.IntegratedSecurity = paramConnectionSetting.IntegratedSecurity.ToString();
            SelectedConnection.DatabaseUsername = paramConnectionSetting.Username;
            SelectedConnection.DatabasePassword = paramConnectionSetting.Password;

            var result = await _BlogsService.CreateExternalConnectionsAsync(SelectedConnection);
            await RefreshConnectionsAsync(result.Id);
        }

        if (paramConnectionSetting.ConnectionState == ConnectionState.Update)
        {
            SelectedConnection.DatabaseName = paramConnectionSetting.DatabaseName;
            SelectedConnection.ServerName = paramConnectionSetting.ServerName;
            SelectedConnection.IntegratedSecurity = paramConnectionSetting.IntegratedSecurity.ToString();
            SelectedConnection.DatabaseUsername = paramConnectionSetting.Username;
            SelectedConnection.DatabasePassword = paramConnectionSetting.Password;

            await _BlogsService.UpdateExternalConnectionsAsync(SelectedConnection);
            await RefreshConnectionsAsync(SelectedConnection.Id);
        }

        if (paramConnectionSetting.ConnectionState == ConnectionState.Delete)
        {
            await _BlogsService.DeleteExternalConnectionsAsync(SelectedConnection);
            SelectedConnection = new ExternalConnectionsDTO();
            await RefreshConnectionsAsync(null);
        }
    }

    async Task ChangeConnection(object value, string name)
    {
        ColBlogEntries = new List<BlogEntries>();
        ShowProgressBar = true;
        StateHasChanged();

        var optionsBuilder = new DbContextOptionsBuilder<DotNetNukeBlogsContext>();
        optionsBuilder.UseSqlServer(CreateDatabaseConnectionString(SelectedConnection));

        using (var context = new DotNetNukeBlogsContext(optionsBuilder.Options))
        {
            ColBlogEntries = await context.BlogEntries.ToListAsync();

            if (ColBlogEntries.Count > 0)
            {
                SelectedBlogEntry = ColBlogEntries.FirstOrDefault();
            }
        }

        ShowProgressBar = false;
        StateHasChanged();
    }

    void EditConnection()
    {
        if (SelectedConnection != null)
        {
            objConnectionSetting.DatabaseName = SelectedConnection.DatabaseName;
            objConnectionSetting.ServerName = SelectedConnection.ServerName;
            objConnectionSetting.IntegratedSecurity = Convert.ToBoolean(SelectedConnection.IntegratedSecurity);
            objConnectionSetting.Username = SelectedConnection.DatabaseUsername;
            objConnectionSetting.Password = SelectedConnection.DatabasePassword;
            objConnectionSetting.ConnectionState = ConnectionState.Update;

            objImportBlogsDatabaseConfiguration.setConnectionParameter(objConnectionSetting);
        }
    }

    void NewConnection()
    {
        objConnectionSetting.DatabaseName = "DotNetNuke";
        objConnectionSetting.ServerName = "(Local)";
        objConnectionSetting.IntegratedSecurity = true;
        objConnectionSetting.Username = "";
        objConnectionSetting.Password = "";
        objConnectionSetting.ConnectionState = ConnectionState.Add;

        objImportBlogsDatabaseConfiguration.setConnectionParameter(objConnectionSetting);
    }

    // Edit Blog

    void EditBlog()
    {
        if (SelectedBlogEntry != null)
        {
            var myUri = new Uri(SelectedBlogEntry.PermaLink);
            var RootDomain = $"http://{myUri.Host}";

            var objBlogDTO = new BlogDTO();
            objBlogDTO.BlogId = 0;
            objBlogDTO.BlogCategory = new List<BlogCategory>();
            objBlogDTO.BlogContent = HtmlDecode(FixImages(RootDomain, SelectedBlogEntry.Entry));
            objBlogDTO.BlogDate = SelectedBlogEntry.AddedDate;
            objBlogDTO.BlogTitle = SelectedBlogEntry.Title;

            if (SelectedBlogEntry.Entry != null)
            {
                var intSummaryLength = SelectedBlogEntry.Entry.Length;

                if (intSummaryLength > 500)
                {
                    intSummaryLength = 500;
                }

                var DecodeLength = ConvertToText(HtmlDecode(SelectedBlogEntry.Entry)).Length;

                if (DecodeLength < intSummaryLength)
                {
                    intSummaryLength = DecodeLength;
                }

                objBlogDTO.BlogSummary =
                    ConvertToText(HtmlDecode(SelectedBlogEntry.Entry))
                        .Substring(0, intSummaryLength).Trim() + "...";
            }

    // Get Blog Categories
            var ColCategories = new List<CategoryDTO>();
            var optionsBuilder = new DbContextOptionsBuilder<DotNetNukeBlogsContext>();
            optionsBuilder.UseSqlServer(CreateDatabaseConnectionString(SelectedConnection));

            using (var context = new DotNetNukeBlogsContext(optionsBuilder.Options))
            {
                try
                {
                    var ColBlogTags = context.BlogTags.ToList();

                    var ColBlogEntryTags =
                        context.BlogEntryTags.Where(x => x.EntryId == SelectedBlogEntry.EntryId).ToList();

                    foreach (var item in ColBlogEntryTags)
                    {
                        var Tag = ColBlogTags.Where(x => x.TagId == item.TagId).FirstOrDefault();

                        var ObjCategory = new CategoryDTO();
                        ObjCategory.Title = Tag.Tag;

                        ColCategories.Add(ObjCategory);
                    }
                }
                catch
                {
    // If the site does not have a BlogTags table 
    // this will throw an error
    // return an empty collection
                    ColCategories = new List<CategoryDTO>();
                }
            }

            ImportBlogsEditControl.EditBlog(objBlogDTO, ColCategories);
        }
    }

    // Utility

    #region private string CreateDatabaseConnectionString(ExternalConnectionsDTO objConnectionSetting)

    private string CreateDatabaseConnectionString(ExternalConnectionsDTO objConnectionSetting)
    {
        var SB = new StringBuilder();
        var strConnectionString = "";

        var strUserInfo = !Convert.ToBoolean(objConnectionSetting.IntegratedSecurity) ?
            string.Format("uid={0};pwd={1}",
                objConnectionSetting.DatabaseUsername,
                objConnectionSetting.DatabasePassword) :
            "integrated security=True";

        strConnectionString = string.Format("{0}data source={1};initial catalog={2};{3}",
            SB,
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }

    #endregion

    #region private string FixImages(string domain, string content)

    private string FixImages(string domain, string content)
    {
        if (content != null)
        {
            content = content.Replace(@"src=&quot;/", @$"src=&quot;{domain}/");
            content = content.Replace(@"src=""", @$"src=""{domain}");
        }
        return content;
    }

    #endregion

    #region private string HtmlDecode(string param)

    private string HtmlDecode(string param)
    {
        var myWriter = new StringWriter();

    // Decode the encoded string.
        HttpUtility.HtmlDecode(param, myWriter);
        return myWriter.ToString();
    }

    #endregion

    #region ConvertToText

    public static string ConvertToText(string sHTML)
    {
        var sContent = sHTML;
        sContent = sContent.Replace("<br />", Environment.NewLine);
        sContent = sContent.Replace("<br>", Environment.NewLine);
        sContent = FormatText(sContent, true);
        return StripTags(sContent, true);
    }

    #endregion

    #region FormatText

    public static string FormatText(string HTML, bool RetainSpace)
    {
    //Match all variants of <br> tag (<br>, <BR>, <br/>, including embedded space
        var brMatch = "\\s*<\\s*[bB][rR]\\s*/\\s*>\\s*";
    //Replace Tags by replacement String and return mofified string
        return Regex.Replace(HTML, brMatch, Environment.NewLine);
    }

    #endregion

    #region StripTags

    public static string StripTags(string HTML, bool RetainSpace)
    {
    //Set up Replacement String
        string RepString;
        if (RetainSpace)
        {
            RepString = " ";
        }
        else
        {
            RepString = "";
        }

    //Replace Tags by replacement String and return mofified string
        return Regex.Replace(HTML, "<[^>]*>", RepString);
    }

    #endregion

}